swagger: "2.0"
info:
  title: "Product and User Management API"
  description: "API for managing products and users"
  version: "1.0.0"
host: "127.0.0.1:5000"
basePath: "/apidocs"
# host: "api.example.com"  # Update this to the desired host
# basePath: "/api"
schemes:
  - "http"
paths:
  /add_product:
    post:
      tags:
        - "Products"
      summary: "Add a new product"
      parameters:
        - in: body
          name: product_data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "Product name"
              price:
                type: number
                format: float
                description: "Product price"
              stock:
                type: integer
                description: "Product stock quantity"
              description:
                type: string
                description: "Product description"
      responses:
        200:
          description: "Product created successfully"
          schema:
            type: object
            properties:
              message:
                type: string

  /products:
    get:
      tags:
        - "Products"
      summary: "Get all products"
      responses:
        200:
          description: "A list of products"
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                  format: float
                stock:
                  type: integer
                description:
                  type: string

  /product/{product_name}:
    get:
      tags:
        - "Products"
      summary: "Get a product by name"
      parameters:
        - name: product_name
          in: path
          required: true
          type: string
          description: "Product name"
      responses:
        200:
          description: "Product details"
          schema:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
                format: float
              stock:
                type: integer
              description:
                type: string
        404:
          description: "Product not found"
          schema:
            type: object
            properties:
              error:
                type: string
    delete:
      tags:
        - "Products"
      summary: "Delete a product by name"
      parameters:
        - name: product_name
          in: path
          required: true
          type: string
          description: "Product name"
      responses:
        200:
          description: "Product deleted successfully"
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: "Product not found"
          schema:
            type: object
            properties:
              message:
                type: string


  /product/{product_name}/stock:
    put:
      tags:
        - "Products"
      summary: "Update the stock of the product"
      parameters:
        - name: product_name
          in: path
          type: string
          required: true
          description: "The name of the product"
        - in: body
          name: stock
          required: true
          schema:
            type: object
            properties:
              stock:
                type: integer
                example: 5
      responses:
        200:
          description: "Product stock updated successfully"
          schema:
            type: object
            properties:
              message:
                type: string
        404:
          description: "Product not found"
          schema:
            type: object
            properties:
              message:
                type: string

  # /product/{product_name}:
  #   delete:
  #     tags:
  #       - "Products"
  #     summary: "Delete a product by name"
  #     parameters:
  #       - name: product_name
  #         in: path
  #         type: string
  #         required: true
  #         description: "Product name"
  #     responses:
  #       200:
  #         description: "Product deleted successfully"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: string
  #       404:
  #         description: "Product not found"
  #         schema:
  #           type: object
  #           properties:
  #             message:
  #               type: string

  /add_user:
    post:
      tags:
        - "Users"
      summary: "Add a new user"
      parameters:
        - in: body
          name: user_data
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                description: "Username"
              email:
                type: string
                format: email
                description: "User's email address"
              password:
                type: string
                description: "User's password"
      responses:
        200:
          description: "User created successfully"
          schema:
            type: object
            properties:
              message:
                type: string

  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users"
      responses:
        200:
          description: "A list of users"
          schema:
            type: array
            items:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email

  /user/{username}:
    get:
      tags:
        - "Users"
      summary: "Get user details by username"
      parameters:
        - name: username
          in: path
          type: string
          required: true
          description: "Username"
      responses:
        200:
          description: "User details"
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
                format: email
        404:
          description: "User not found"
          schema:
            type: object
            properties:
              error:
                type: string
